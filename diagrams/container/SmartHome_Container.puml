@startuml
title Диаграмма контейнера Системы Умный дом

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

Person(user, "Пользователь", "Пользователь системы Умный дом")
Person(admin, "Администратор", "Администратор системы Умный дом")
System_Boundary(system, "Система Умный дом") {
    Container(apiGateway, "АPI Gateway", "Kusk", "Маршрутизация запросов, балансировка нагрузки, аутентификация, авторизация")

    Container(telemetryService, "Телеметрия", "Node.js", "Ведение информации поступающей с датчиков")
    Container(deviceService, "Управление устройствами", "Node.js", "Управление отоплением, автоматическое поддержание температуры")
    Container(userService, "Управление пользователями", "Node.js", "Управление пользователями")

    ContainerDb(telemetryDb, "База данных", "ClickHouse")
    ContainerDb(deviceDb, "База данных", "PostgreSQL")
    ContainerDb(userDb, "База данных", "PostgreSQL")
    ContainerQueue(kafka, "Шина данных", "Kafka")

    Rel(apiGateway, telemetryService, "Получить телеметрию: последнюю, за период", "JSON/HTTPS")
    Rel(apiGateway, deviceService, "CRUD, вкл/выкл, выполнить команду", "JSON/HTTPS")
    Rel(apiGateway, userService, "СRUD", "JSON/HTTPS")

    Rel(deviceService, kafka, "Отправляет команды", "JSON/HTTPS")
    Rel_L(kafka, telemetryService, "Отправляет телеметрию", "JSON/HTTPS")

    Rel(deviceService, deviceDb, "Чтение / запись", "SQL/TCP")
    Rel(telemetryService, telemetryDb, "Чтение / запись", "SQL/TCP")
    Rel(userService, userDb, "Чтение / запись", "SQL/TCP")
}

System_Ext(device, "Устройства", "API устройств", "Async API, формат данных JSON")

Rel(kafka, device, "Отправляет команды", "JSON/HTTPS")
Rel(device, kafka, "Отправляет телеметрию", "JSON/HTTPS")

Rel(user, apiGateway, "Использует систему Умный дом", "REST")
Rel(admin, apiGateway, "Управляет системой Умный дом", "REST")

@enduml
