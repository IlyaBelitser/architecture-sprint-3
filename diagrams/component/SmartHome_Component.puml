@startuml
title Диаграмма компонентов Системы Умный дом

!include <C4/C4_Component>

Person(user, "Пользователь", "Пользователь системы Умный дом")
Person(admin, "Администратор", "Администратор системы Умный дом")
System_Boundary(system, "Система Умный дом") {
    Container(apiGateway, "АPI Gateway", "Kusk", "Маршрутизация запросов, балансировка нагрузки, аутентификация, авторизация")

    Container(telemetryService, "Телеметрия", "Node.js", "Ведение информации поступающей с датчиков") {
        Component(telemetryController, "Контроллер", "Обработка запросов пользователя к телеметрии")
        Component(telemetryLogic, "Сервис", "Бизнес логика")
        Component(telemetryRepo, "Репозиторий", "Запросы к БД")
        Component(telemetryConsumer, "Обработчик входящей телеметрии", "Kafka Consumer")

        Rel(telemetryController, telemetryLogic, "")
        Rel(telemetryLogic, telemetryRepo, "")
        Rel(telemetryConsumer, telemetryLogic, "")
    }

    Container(deviceService, "Управление устройствами", "Node.js", "Управление отоплением, автоматическое поддержание температуры") {
        Component(deviceController, "Контроллер", "Обработка запросов пользователя к устройствам")
        Component(deviceLogic, "Сервис", "Бизнес логика")
        Component(deviceRepo, "Репозиторий", "Запросы к БД")
        Component(deviceProducer, "Отправитель команд устройствам", "Kafka Consumer")

        Rel(deviceController, deviceLogic, "")
        Rel(deviceLogic, deviceRepo, "")
        Rel(deviceLogic, deviceProducer, "")
    }

    Container(userService, "Управление пользователями", "Node.js", "Управление пользователями") {
        Component(userController, "Контроллер", "Обработка запросов на управление пользователями")
        Component(userLogic, "Сервис", "Бизнес логика")
        Component(userRepo, "Репозиторий", "Запросы к БД")

        Rel(userController, userLogic, "")
        Rel(userLogic, userRepo, "")
    }

    ContainerDb(telemetryDb, "База данных", "ClickHouse")
    ContainerDb(deviceDb, "База данных", "PostgreSQL")
    ContainerDb(userDb, "База данных", "PostgreSQL")
    ContainerQueue(kafka, "Шина данных", "Kafka")

    Rel(apiGateway, telemetryController, "Получить телеметрию: последнюю, за период", "JSON/HTTPS")
    Rel(apiGateway, deviceController, "CRUD, вкл/выкл, выполнить команду", "JSON/HTTPS")
    Rel(apiGateway, userController, "СRUD", "JSON/HTTPS")

    Rel(deviceProducer, kafka, "Отправляет команды", "JSON/HTTPS")
    Rel_L(kafka, telemetryConsumer, "Отправляет телеметрию", "JSON/HTTPS")

    Rel(deviceRepo, deviceDb, "Чтение / запись", "SQL/TCP")
    Rel(telemetryRepo, telemetryDb, "Чтение / запись", "SQL/TCP")
    Rel(userRepo, userDb, "Чтение / запись", "SQL/TCP")

}


System_Ext(device, "Устройства", "API устройств", "Async API, формат данных JSON")

Rel(kafka, device, "Отправляет команды", "JSON/HTTPS")
Rel(device, kafka, "Отправляет телеметрию", "JSON/HTTPS")

Rel(user, apiGateway, "Пользуется системой", "REST")
Rel(admin, apiGateway, "Управляет системой Умный дом", "REST")

@enduml
